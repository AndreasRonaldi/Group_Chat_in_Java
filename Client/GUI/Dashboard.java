package Client.GUI;

//import required classes and packages  
import javax.swing.*;

import Client.ClientServer;
import static javax.swing.JOptionPane.showMessageDialog;

import java.awt.*;

//create NewPage class to create a new page on which user will navigate  
public class Dashboard extends JFrame {

    // Variables declaration - do not modify
    private javax.swing.JButton sendBtn;
    private javax.swing.JScrollPane Backgroud;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField textField;
    // End of variables declaration

    public Dashboard() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {

        Backgroud = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        textField = new javax.swing.JTextField();
        sendBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.setEditable(false);
        Backgroud.setViewportView(textArea);

        sendBtn.setText("Send");
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleSend(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Backgroud)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, 298,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18,
                                                        Short.MAX_VALUE)
                                                .addComponent(sendBtn)))
                                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(Backgroud, javax.swing.GroupLayout.PREFERRED_SIZE, 250,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(sendBtn))
                                .addContainerGap(9, Short.MAX_VALUE)));

        pack();
    }// </editor-fold>

    public void displayMessage(String message) {
        textArea.append(message + "\n");
    }

    public void displayAlert(String message) {
        showMessageDialog(null, message);
    }

    private void handleSend(java.awt.event.ActionEvent evt) {
        String input = textField.getText();
        if (!input.trim().isEmpty()) {
            ClientServer.handleSendMsg(input.trim());
        }
    }
}